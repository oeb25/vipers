predicate time_credit()
method consume_time_credit()
    requires time_credit()
define O(n) ( acc(time_credit(), n/1) )

function math_fib(n: Int): Int
    requires 0 <= n
    ensures 0 <= result
{
    n <= 1 ? n : math_fib(n - 1) + math_fib(n - 2)
}
function math_luc(n: Int): Int
    requires 0 <= n
    ensures 1 <= result
{
    n == 0 ? 2 : n == 1 ? 1 : math_luc(n - 1) + math_luc(n - 2)
}

method fib_recursive(n: Int)
    returns (res: Int)
    requires n >= 0
    requires O(math_fib(n) + math_luc(n) - 1)
    ensures res == math_fib(n)
{
    consume_time_credit()
    if (n == 0) {
        res := 0
    } elseif (n == 1) {
        res := 1
    } else {
        var sub1: Int
        sub1 := fib_recursive(n - 1)

        var sub2: Int
        sub2 := fib_recursive(n - 2)

        res := sub1 + sub2
    }
}
